#Deploying a VM and setting up lamp in azure


#!/usr/bin/env bash

# A script that would create a lamp service on after creating resource group. 
#partial original source code from bash-for-beginners by GPS I added onto


setup() {
    #So this sets up CLI for azure
    curl -sl https://aka.ms/InstallAzureCLIDeb | sudo bash

#Login  We then login here.  

az login --use-device-code
echo "You're logged in."

}


#select a region 

# Select a region
check_region() {
    local region_exists=false
    while [[ "$region_exists" = false ]];  do
        print_out_regions
        read -p "Enter your region: " selected_region
        for j in "${regions_array[@]}"
        do
            if [[ "$selected_region" == "$j" ]]; then
                region_exists=true
                echo "Region exists"
                break
            else
                continue
            fi
        done
    done
}

# Check if resource group already exists.
check_resource_group () {
    while true; do
        read -p "Enter a name for you resource group: " resource_group
        if [ $(az group exists --name $resource_group) = true ]; then 
            echo "The group $resource_group exists in $selected_region, please provide another name..."
        else
            break
        fi
    done
}

# Create the resource group
create_resource_group () {
    echo "Creating resource group: $resource_group in $selected_region"
    az group create -g $resource_group -l $selected_region | grep provisioningState
}

#List all resource groups
list_resource_groups() {
    az group list -o table
}   

# Function to ask the user if they want to use an existing VM or create a new one
ask_vm() {
    while true; do
        read -p "Do you want to use an existing VM? [y/n] " yn
        case $yn in
            [Yy]* )
                # List existing VMs
                az vm list -o table
                read -p "Enter the name of the VM you want to use: " vm_name
                # Check if VM exists
                if [ $(az vm show --name $vm_name --query name -o tsv 2>/dev/null) = $vm_name ]; then 
                    echo "Using existing VM: $vm_name"
                    break
                else
                    echo "The VM $vm_name does not exist. Please enter a valid VM name."
                fi
                ;;
            [Nn]* )
                # Create a new VM
                read -p "Enter a name for your VM: " vm_name
                read -p "Enter a username for your VM: " username
                read -sp "Enter a password for your VM: " password
                echo

                # Create the VM
                echo "Creating VM: $vm_name"
                az vm create \
                    --name $vm_name \
                    --resource-group $resource_group \
                    --image UbuntuLTS \
                    --admin-username $username \
                    --admin-password $password \
                    --generate-ssh-keys

                echo "VM $vm_name created."
                break
                ;;
            * )
                echo "Please answer yes or no."
                ;;
        esac
    done
}

check_vm_configuration() {
    # Check if VM exists
    if [ $(az vm show --name $vm_name --query name -o tsv 2>/dev/null) = $vm_name ]; then 
        # Check if VM has a public IP address
        vm_ip=$(az vm show -d -g $resource_group -n $vm_name --query publicIps -o tsv)
        if [ ! -z "$vm_ip" ]; then
            # Check if port 80 is open on the VM
            vm_port=$(az vm show -d -g $resource_group -n $vm_name --query "networkProfile.networkInterfaces[].ipConfigurations[].publicIPAddress[].id" -o tsv | cut -d'/' -f13)
            vm_port_status=$(az network nsg rule list --resource-group $resource_group --nsg-name $(az network nic show --ids $(az vm show -d -g $resource_group -n $vm_name --query "networkProfile.networkInterfaces[].id" -o tsv) --query "networkSecurityGroup.id" -o tsv | cut -d'/' -f9) --query "[?destinationPortRange=='80'].{Status:securityRuleAccess}" -o tsv)
            if [ "$vm_port_status" = "Allow" ]; then
                echo "The VM is properly configured for setting up a LAMP stack."
                return 0
            else
                echo "Port 80 is not open on the VM. Please open port 80 and try again."
                return 1
            fi
        else
            echo "The VM does not have a public IP address. Please assign a public IP address and try again."
            return 1
        fi
    else
        echo "The VM $vm_name does not exist. Please create a VM and try again."
        return 1
    fi
}

deploy_lamp() {
    # Check if Apache, MySQL and PHP are already installed
    if [ $(dpkg-query -W -f='${Status}' apache2 2>/dev/null | grep -c "ok installed") -eq 1 ] && \
       [ $(dpkg-query -W -f='${Status}' mysql-server 2>/dev/null | grep -c "ok installed") -eq 1 ] && \
       [ $(dpkg-query -W -f='${Status}' php 2>/dev/null | grep -c "ok installed") -eq 1 ]; then
        echo "LAMP stack is already installed."
        return
    fi

    # Install Apache
    sudo apt update
    sudo apt install -y apache2

    # Install MySQL
    sudo apt install -y mysql-server

    # Install PHP
    sudo apt install -y php libapache2-mod-php php-mysql

    # Configure Apache
    sudo a2enmod rewrite
    sudo systemctl restart apache2

    # Create a PHP test file
    echo "<?php phpinfo(); ?>" | sudo tee /var/www/html/info.php

    echo "LAMP stack has been deployed successfully."
}





setup
check_region
check_resource_group 
create_resource_group
list_resource_groups
ask_vm
check_vm_configuration
deploy_lamp
